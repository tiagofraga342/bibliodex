version: '3.8'

services:
  db:
    image: postgres:15-alpine # Using PostgreSQL 15
    container_name: bibliodex_db
    environment:
      POSTGRES_USER: bibliodex_user # Define your desired user
      POSTGRES_PASSWORD: bibliodex_password # Define your desired password
      POSTGRES_DB: bibliodex_db # Define your desired database name
    volumes:
      - db_data:/var/lib/postgresql/data # Persist database data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql # Run init script on first start
    ports:
      - "5432:5432" # Expose PostgreSQL port to host (optional, for direct access)
    networks:
      - bibliodex-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bibliodex_user -d bibliodex_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  backend:
    build:
      context: ./backend # Path to your backend Dockerfile
      dockerfile: Dockerfile
    container_name: bibliodex_backend
    environment:
      # Ensure this matches the credentials and db name in the 'db' service
      DATABASE_URL: "postgresql://bibliodex_user:bibliodex_password@db:5432/bibliodex_db"
      SECRET_KEY: "your_super_secret_and_long_jwt_key_here_12345" # CHANGE THIS IN PRODUCTION
      ALLOWED_ORIGINS: "http://localhost:3001,http://127.0.0.1:3001" # Adjust for your frontend dev/prod URLs
      # PYTHONUNBUFFERED: 1 # Often useful for seeing logs immediately
    ports:
      - "8000:8000" # Expose backend API port
    networks:
      - bibliodex-network
    depends_on:
      db:
        condition: service_healthy # Wait for db to be healthy
    restart: unless-stopped
    volumes:
      - ./backend:/code # Permite hot reload do c√≥digo Python
      - ./scripts:/code/scripts
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  frontend:
    build:
      context: ./frontend # Path to your frontend Dockerfile
      dockerfile: Dockerfile
    container_name: bibliodex_frontend
    command: npm run dev
    volumes:
      - ./frontend:/app # Mount local frontend code for live reloading
      - /app/node_modules # Prevent host node_modules from interfering
    ports:
      - "3000:3000" # Expose frontend port (use 3000 on host for consistency)
    networks:
      - bibliodex-network
    environment:
      # NEXT_PUBLIC_API_BASE_URL is already set in the frontend Dockerfile to http://backend:8000
      # NODE_ENV: development # Or 'production' depending on the build stage in Dockerfile
      # If your frontend Dockerfile builds for production, NODE_ENV=production is usually set there.
      # If you want to override for local docker-compose development:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_BASE_URL=http://backend:8000 # Ensure this points to the backend service
    depends_on:
      - backend # Wait for backend to start
    restart: unless-stopped

volumes:
  db_data: # Named volume for PostgreSQL data persistence
  # backend_data: # Remove if it was for SQLite and no longer needed

networks:
  bibliodex-network:
    driver: bridge